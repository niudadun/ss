using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using SmartFlow.Droid;
using System.Runtime.CompilerServices;
using SmartFlow.Shared.Repository.Interfaces;
using System.IO;
using System.Threading.Tasks;
using Xamarin.Forms;
using SmartFlow.Shared.Helpers;

[assembly: Xamarin.Forms.Dependency(typeof(PicturePickerImplementation))]
namespace SmartFlow.Droid
{
    /// <summary>
    /// This class is used for picture selection from ImagePicker
    /// </summary>
    public class PicturePickerImplementation : IPicturePicker
    {
        private static string TAG = "PicturePickerImplementation_Android";

        /// <summary>
        /// This method is used to get the image stream from the selected picture.
        /// This image is passed back to the main activity with the stream data
        /// </summary>
        /// <returns></returns>
        public Task<Stream> GetImageStreamAsync()
        {
            try
            {
                // Define the Intent for getting images
                Intent intent = new Intent();
                intent.SetType("image/*");
                intent.SetAction(Intent.ActionGetContent);

                // Get the MainActivity instance
                MainActivity activity = Forms.Context as MainActivity;

                // Start the picture-picker activity (resumes in MainActivity.cs)
                activity.StartActivityForResult(
                    Intent.CreateChooser(intent, Shared.Helpers.L10n.GetMappedString(Shared.Enums.TextMapping.SELECT_IMAGE)),
                    MainActivity.PickImageId);

                // Save the TaskCompletionSource object as a MainActivity property
                activity.PickImageTaskCompletionSource = new TaskCompletionSource<Stream>();

                // Return Task object
                return activity.PickImageTaskCompletionSource.Task;
            }
            catch (Exception e)
            {
                LogHandler.AddExceptionLog(TAG, "", e, true);
            }
            return null;
        }
    }
}