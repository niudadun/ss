using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SmartFlow.Shared.ViewModels;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using SmartFlow.Shared.Helpers;
using SmartFlow.Shared.Models;
using SmartFlow.Shared.Enums;
using XLabs.Forms.Controls;
using SmartFlow.Shared.Behaviours;
using SmartFlow.Shared.Models.Ede.Enums;
using SmartFlow.Shared.Converters;

namespace SmartFlow.Shared.Views
{
    /// <summary>
    /// Declaration Details Page
    /// </summary>
	[XamlCompilation(XamlCompilationOptions.Compile)]
	public partial class ManageDeclarationPage : ContentPage
	{
        private static string TAG = "ManageDeclarationPage";
        Dictionary<string, ScrollView> layouts;
        string currentView;
        Enums.EnumMaps Mode;
        DeclarationViewModel ViewModel;

        public ManageDeclarationPage(InfoHolder infoHolder)
        {
            try
            {
                InitializeComponent();

                Mode = infoHolder.getwhichMode();
                ViewModel = new DeclarationViewModel(Navigation)
                {
                    SelectedProfileId = infoHolder.getId()
                };
                SetDataLayout();
                SetFooterButtons();
            }
            catch (Exception ex)
            {

            }
        }

        void SetDataLayout()
        {
            try
            {
                var EmptyChapterList = ViewModel.CurrentDeclaration.Chapters.FindAll(i => i.ChapterIdentifier == ChapterIdentifiers.EmptyChapter);

                foreach (DeclarationType val in Enum.GetValues(typeof(DeclarationType)))
                {
                    var index = 1;
                    foreach (var declaration in ViewModel.Declarations.Where(i => i.DeclarationType == val).OrderBy(c => DateTime.Parse(c.LastUpdatedDate)))
                    {
                        var chapter = new Chapter()
                        {
                            Text = declaration.DeclarationType.ToString() + index + " " + DateTime.Parse(declaration.LastUpdatedDate).ToString("dd/MM/yyyy"),
                            Questions = new List<Question>(),
                            ChapterIdentifier = ChapterIdentifiers.Declare,
                            Id = declaration.Id
                        };
                        chapter.Questions.AddRange(declaration.Profile.Chapters[0].Questions);
                        chapter.Questions.AddRange(declaration.Chapters[0].Questions);
                        ViewModel.Chapters.Add(chapter);
                        index++;
                    }
                }

                ViewModel.Chapters.AddRange(EmptyChapterList);
                BindingContext = ViewModel;
                CreateMenuLayout(ViewModel.Chapters);

                layouts = new Dictionary<string, ScrollView>();

                ViewModel.Chapters.ForEach(i =>
                {
                    if (i.ChapterIdentifier != ChapterIdentifiers.EmptyChapter)
                        layouts.Add(i.Id.ToString(), CreateDataLayout(i, true));
                });

                var dataLayout = layouts[ViewModel.Chapters[0].Id.ToString()];
                var grid = this.FindByName<Grid>("MainGrid");
                grid.Children.Add(dataLayout);
                Grid.SetColumn(dataLayout, 1);
                currentView = dataLayout.ClassId;
            }
            catch (Exception ex)
            {
            }
        }

        private void CreateMenuLayout(List<Chapter> Chapters)
        {
            var stackLayout = new StackLayout()
            {
                Orientation = StackOrientation.Vertical,
                VerticalOptions = LayoutOptions.FillAndExpand,
                Spacing = 1,
            };

            var headerButton = new ImageButton()
            {
                // TextColor = (Color)Application.Current.Resources["Text_Color"],
                WidthRequest = 80,
                HeightRequest = 80,
                BorderRadius = 0,
                Orientation = XLabs.Enums.ImageOrientation.ImageCentered,
                Source = ImageSource.FromFile(Utils.DEFAULT_PROFILE_PIC),
                BackgroundColor = (Color)Application.Current.Resources["SmartFlow_Yellow"],
                ClassId = "HeaderButton"
            };
            stackLayout.Children.Add(headerButton);
            foreach (var chapter in Chapters)
            {
                var button = new Button()
                {
                    ClassId = chapter.Id.ToString(),
                    Text = chapter.Text,
                    TextColor = (Color)Application.Current.Resources["Text_Color"],
                    WidthRequest = 80,
                    HeightRequest = 80,
                    BorderRadius = 0,
                    BackgroundColor = (Color)Application.Current.Resources["TextView_Bg"],
                };
                
                if (chapter == Chapters.First())
                    button.BackgroundColor = (Color)Application.Current.Resources["SmartFlow_Blue"];
                if (chapter.ChapterIdentifier != ChapterIdentifiers.EmptyChapter)
                    button.Clicked += GetView;
                stackLayout.Children.Add(button);
            }

            var grid = this.FindByName<Grid>("MainGrid");

            var scrollView = new ScrollView()
            {
                Content = stackLayout,
                ClassId = "MenuLayOut"
            };
            grid.Children.Add(scrollView);
            Grid.SetColumn(scrollView, 0);
        }

        private ScrollView CreateDataLayout(Chapter chapter, bool IsReadOnly = false)
        {

            var stackLayout = new StackLayout()
            {
                Orientation = StackOrientation.Vertical,
                VerticalOptions = LayoutOptions.FillAndExpand,
                ClassId = chapter.Id.ToString(),
                Padding = new Thickness(20, 10, 20, 10),
            };

            //Create question list based on view model.
            foreach (var question in chapter.Questions)
            {
                var label = new Label()
                {
                    ClassId = question.QuestionIdentifier.ToString() + "_label",
                    Text = question.Text,
                    VerticalTextAlignment = TextAlignment.Center,
                    HorizontalOptions = LayoutOptions.StartAndExpand,
                    Style = (Style)Application.Current.Resources["SmallFont"],
                    TextColor = Color.Gray
                };
                stackLayout.Children.Add(label);

                var AnswerEntry = new Entry()
                {
                    ClassId = question.QuestionIdentifier.ToString() + "_entry",
                    Text = question.AnswerText,
                };
                stackLayout.Children.Add(AnswerEntry);
            }

           var dataView = new ScrollView()
            {
                ClassId = chapter.Id.ToString(),
                Content = stackLayout,
            };
            dataView.Content.IsEnabled = !IsReadOnly;
            return dataView;
        }

        private void GetView(object sender, EventArgs e)
        {
            var button = (Button)sender;

            StackLayout menuLayOut = null;
            var grid = this.FindByName<Grid>("MainGrid");
            foreach (var v in grid.Children)
            {
                if (v.ClassId == currentView)
                {
                    layouts[v.ClassId] = (ScrollView)v;
                }
                //Resetting button colors to default Color
                if (v.ClassId == "MenuLayOut")
                {
                    var menuView = (ScrollView)v;
                    menuLayOut = (StackLayout)menuView.Content;
                    foreach (var child in menuLayOut.Children)
                    {
                        if (child.ClassId != "HeaderButton")
                        {
                            var btn = (Button)child;
                            btn.BackgroundColor = (Color)Application.Current.Resources["TextView_Bg"];
                        }
                    }
                }
            }
            grid.Children.RemoveAt(grid.Children.Count() - 1);
            var dataLayout = layouts[button.ClassId];
            grid.Children.Add(dataLayout);
            Grid.SetColumn(dataLayout, 1);
            currentView = button.ClassId;
            button.BackgroundColor = (Color)Application.Current.Resources["SmartFlow_Blue"];
        }

        /// <summary>
        /// Back button trigger event.
        /// This button is available in footerView, but the callback handler is registered in this class.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        async void OnBackclicked(object sender, EventArgs e)
        {
            OnBackButtonPressed();
        }

        void SetFooterButtons()
        {
            FooterViewId.SetButtonHandling("").Clicked += OnEditClicked;
            FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.EDIT_TEXT));
            FooterViewId.SetButtonVisible(true);
        }

        private void OnEditClicked(object sender, EventArgs e)
        {

            if (Navigation.ModalStack.Count == 0 || Navigation.ModalStack.Last().GetType() != typeof(CreateDeclarationPage))
            {
                App.NavigationService.GoBack(false);
                App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.CreateDeclarationPage.ToString(), new InfoHolder(ViewModel.SelectedProfileId, Enums.EnumMaps.CREATE_DECLARATION_UPDATE_SCREEN, Convert.ToInt32(currentView)), false);
            }

        }

        /// <summary>
        /// Application developers can override this method to provide behavior when the back button is pressed.
        /// </summary>
        /// <returns>
        /// To be added.
        /// </returns>
        /// <remarks>
        /// Handled default back navigation of android to Custom Navigation.
        /// </remarks>
        protected override bool OnBackButtonPressed()
        {
            App.NavigationService.GoBack(false);
            return true;
        }
    }
}