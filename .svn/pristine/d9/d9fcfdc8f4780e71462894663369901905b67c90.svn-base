using SmartFlow.Shared.Models;
using System;
using System.Collections.Generic;
using System.Text;

namespace SmartFlow.Shared.Helpers
{
    /// <summary>
    /// InfoHolder class
    /// This class contains the state and profile id of the selected profile.
    /// It is used when Details page/Success page is called with a particular details page state.
    /// So rather than passing two separate params, we use this class to pass data
    /// </summary>
    public class InfoHolder
    {
        int id;
        string languageId;

        /// <summary>
        /// Declaration id which is passed from activity to sub activity
        /// </summary>
        public int DeclarationId { get; set; }
        Enums.EnumMaps whichMode;
        List<Profile> ProfileList;

        /// <summary>
        /// Profile name passed from activity to sub activity
        /// </summary>
        public string ProfileName { get; set; }

        /// <summary>
        /// Declaration date passed from activity to sub activity
        /// </summary>
        public string Date { get; set; }

        /// <summary>
        /// DeNo passed from activity to sub activity
        /// </summary>
        public string DeNo { get; set; }

        /// <summary>
        /// TripID passed from activity to sub activity
        /// </summary>
        public string TripID { get; set; }

        /// <summary>
        ///  InfoHolder parametrized Constructor
        /// </summary>
        /// <param name="profileId"></param>
        /// <param name="whichInfo"></param>
        /// <param name="pList"></param>
        public InfoHolder(int profileId, Enums.EnumMaps whichInfo, List<Profile> pList)
        {
            id = profileId;
            whichMode = whichInfo;
            ProfileList = pList;
        }

        /// <summary>
        ///  InfoHolder parametrized Constructor
        /// </summary>
        /// <param name="profileId"></param>
        /// <param name="whichInfo"></param>
        /// <param name="declarationId"></param>
        public InfoHolder(int profileId, Enums.EnumMaps whichInfo, int declarationId = 0)
        {
            id = profileId;
            whichMode = whichInfo;
            DeclarationId = declarationId;
        }

        /// <summary>
        ///  InfoHolder parametrized Constructor
        /// </summary>
        /// <param name="languageID"></param>
        /// <param name="whichInfo"></param>
        public InfoHolder(string languageID, Enums.EnumMaps whichInfo)
        {
            languageId = languageID;
            whichMode = whichInfo;
        }

        /// <summary>
        /// InfoHolder parametrized Constructor
        /// </summary>
        /// <param name="profileId"></param>
        /// <param name="whichInfo"></param>
        /// <param name="name"></param>
        /// <param name="dateInfo"></param>
        /// <param name="deNoInfo"></param>
        /// <param name="tripIDInfo"></param>
        public InfoHolder(int profileId, Enums.EnumMaps whichInfo, string name, string dateInfo, string deNoInfo, string tripIDInfo)
        {
            id = profileId;
            whichMode = whichInfo;
            ProfileName = name;
            Date = dateInfo;
            DeNo = deNoInfo;
            TripID = tripIDInfo;
        }

        /// <summary>
        /// Get profile id
        /// </summary>
        /// <returns></returns>
        public int GetId()
        {
            return id;
        }

        /// <summary>
        /// Get State of details page
        /// </summary>
        /// <returns></returns>
        public Enums.EnumMaps GetMode()
        {
            return whichMode;
        }

        /// <summary>
        /// Get profile list
        /// </summary>
        /// <returns></returns>
        public List<Profile> GetProfileList()
        {
            return ProfileList;
        }
        /// <summary>
        /// Get language code which is passed from activity to sub activity
        /// </summary>
        /// <returns></returns>
        public string GetLanguageCode()
        {
            return languageId;
        }
    }
}
