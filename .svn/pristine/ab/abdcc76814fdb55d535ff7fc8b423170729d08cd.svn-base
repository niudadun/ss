using Microsoft.EntityFrameworkCore.Migrations;
using System;
using System.Collections.Generic;

namespace SmartFlow.Shared.Migrations
{
    public partial class InitialMigration : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Profiles",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    CreatedDate = table.Column<string>(nullable: true),
                    Image = table.Column<byte[]>(nullable: true),
                    Index = table.Column<int>(nullable: false),
                    Language = table.Column<string>(nullable: true),
                    LastUpdatedDate = table.Column<string>(nullable: true),
                    Name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Profiles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ValidationConfig",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    AllowOnlyNumeric = table.Column<bool>(nullable: false),
                    IsRequired = table.Column<bool>(nullable: false),
                    MaxDate = table.Column<DateTime>(nullable: false),
                    MaxLength = table.Column<int>(nullable: false),
                    MinDate = table.Column<DateTime>(nullable: false),
                    MinLength = table.Column<int>(nullable: false),
                    ValidateContactNumber = table.Column<bool>(nullable: false),
                    ValidateEmailAddress = table.Column<bool>(nullable: false),
                    ValidateSpecialCharacters = table.Column<bool>(nullable: false),
                    ValidateSpecialCharactersName = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ValidationConfig", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Declarations",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    CreatedDate = table.Column<string>(nullable: true),
                    DeNo = table.Column<string>(nullable: true),
                    DeclarationType = table.Column<int>(nullable: false),
                    Language = table.Column<string>(nullable: true),
                    LastUpdatedDate = table.Column<string>(nullable: true),
                    ProfileId = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Declarations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Declarations_Profiles_ProfileId",
                        column: x => x.ProfileId,
                        principalTable: "Profiles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Chapter",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    ChapterDeclarationType = table.Column<int>(nullable: false),
                    ChapterIdentifier = table.Column<int>(nullable: false),
                    DeclarationId = table.Column<int>(nullable: true),
                    Order = table.Column<int>(nullable: false),
                    ProfileId = table.Column<int>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Chapter", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Chapter_Declarations_DeclarationId",
                        column: x => x.DeclarationId,
                        principalTable: "Declarations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Chapter_Profiles_ProfileId",
                        column: x => x.ProfileId,
                        principalTable: "Profiles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Question",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    AnswerCode = table.Column<string>(nullable: true),
                    AnswerText = table.Column<string>(nullable: true),
                    ChapterId = table.Column<int>(nullable: false),
                    ConfigId = table.Column<int>(nullable: true),
                    IsVisible = table.Column<bool>(nullable: false),
                    Order = table.Column<int>(nullable: false),
                    QuestionIdentifier = table.Column<int>(nullable: false),
                    QuestionKey = table.Column<string>(nullable: true),
                    SelectedAnswerIndex = table.Column<int>(nullable: false),
                    Text = table.Column<string>(nullable: true),
                    Type = table.Column<int>(nullable: false),
                    isMandatory = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Question", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Question_Chapter_ChapterId",
                        column: x => x.ChapterId,
                        principalTable: "Chapter",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Question_ValidationConfig_ConfigId",
                        column: x => x.ConfigId,
                        principalTable: "ValidationConfig",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Answer",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Code = table.Column<string>(nullable: true),
                    Order = table.Column<int>(nullable: false),
                    QuestionId = table.Column<int>(nullable: true),
                    Text = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Answer", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Answer_Question_QuestionId",
                        column: x => x.QuestionId,
                        principalTable: "Question",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ConditionalQuestion",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    AnswerId = table.Column<int>(nullable: true),
                    ConditionQuestion = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ConditionalQuestion", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ConditionalQuestion_Answer_AnswerId",
                        column: x => x.AnswerId,
                        principalTable: "Answer",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Answer_QuestionId",
                table: "Answer",
                column: "QuestionId");

            migrationBuilder.CreateIndex(
                name: "IX_Chapter_DeclarationId",
                table: "Chapter",
                column: "DeclarationId");

            migrationBuilder.CreateIndex(
                name: "IX_Chapter_ProfileId",
                table: "Chapter",
                column: "ProfileId");

            migrationBuilder.CreateIndex(
                name: "IX_ConditionalQuestion_AnswerId",
                table: "ConditionalQuestion",
                column: "AnswerId");

            migrationBuilder.CreateIndex(
                name: "IX_Declarations_ProfileId",
                table: "Declarations",
                column: "ProfileId");

            migrationBuilder.CreateIndex(
                name: "IX_Question_ChapterId",
                table: "Question",
                column: "ChapterId");

            migrationBuilder.CreateIndex(
                name: "IX_Question_ConfigId",
                table: "Question",
                column: "ConfigId");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "ConditionalQuestion");

            migrationBuilder.DropTable(
                name: "Answer");

            migrationBuilder.DropTable(
                name: "Question");

            migrationBuilder.DropTable(
                name: "Chapter");

            migrationBuilder.DropTable(
                name: "ValidationConfig");

            migrationBuilder.DropTable(
                name: "Declarations");

            migrationBuilder.DropTable(
                name: "Profiles");
        }
    }
}
