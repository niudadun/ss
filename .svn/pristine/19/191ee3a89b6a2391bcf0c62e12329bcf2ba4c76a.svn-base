using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using SmartFlow.Shared.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SmartFlow.Shared.Data
{
    /// <summary>
    /// Database Context class for saving Profiles/Declaration information
    /// </summary>
    /// <seealso cref="Microsoft.EntityFrameworkCore.DbContext" />
    public class DatabaseContext : DbContext
    {
        private static string TAG = "DatabaseContext";

        /// <summary>
        /// Gets or sets the profiles.
        /// </summary>
        /// <value>
        /// The profiles.
        /// </value>
        public DbSet<Profile> Profiles { get; set; }

        /// <summary>
        /// Gets or sets the declarations.
        /// </summary>
        /// <value>
        /// The declarations.
        /// </value>
        public DbSet<Declaration> Declarations { get; set; }

        private readonly string _databasePath;

        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseContext"/> class.
        /// </summary>
        /// <param name="databasePath">The database path.</param>
        public DatabaseContext(string databasePath)
        {
            _databasePath = databasePath;
            // Database.Migrate();
            //Database.EnsureDeleted();
            Database.Migrate();
        }

        /// <summary>
        /// <para>
        /// Override this method to configure the database (and other options) to be used for this context.
        /// This method is called for each instance of the context that is created.
        /// </para>
        /// <para>
        /// In situations where an instance of <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> may or may not have been passed
        /// to the constructor, you can use <see cref="P:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.IsConfigured" /> to determine if
        /// the options have already been set, and skip some or all of the logic in
        /// <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" />.
        /// </para>
        /// </summary>
        /// <param name="optionsBuilder">A builder used to create or modify options for this context. Databases (and other extensions)
        /// typically define extension methods on this object that allow you to configure the context.</param>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlite(string.Format("Filename={0}", _databasePath));
        }

        /// <summary>
        /// Override this method to further configure the model that was discovered by convention from the entity types
        /// exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting model may be cached
        /// and re-used for subsequent instances of your derived context.
        /// </summary>
        /// <param name="modelBuilder">The builder being used to construct the model for this context. Databases (and other extensions) typically
        /// define extension methods on this object that allow you to configure aspects of the model that are specific
        /// to a given database.</param>
        /// <remarks>
        /// If a model is explicitly set on the options for this context (via <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />)
        /// then this method will not be run.
        /// </remarks>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            //In case of ensureCreated use the below behaviour to execute the cascade functionality.
            //foreach (var relationship in modelBuilder.Model.GetEntityTypes().SelectMany(e => e.GetForeignKeys()))
            //{
            //    relationship.DeleteBehavior = DeleteBehavior.Cascade;
            //}
            //modelBuilder.Entity<Chapter>();
            //modelBuilder.Entity<Question>();
            //modelBuilder.Entity<Answer>();
            //modelBuilder.Entity<Validation>();

            //modelBuilder.Entity<Declaration>().HasMany(p => p.Chapters).WithOne().OnDelete(DeleteBehavior.Cascade);
            // modelBuilder.

            //modelBuilder.Entity<Profile>()
            //   .HasKey(p => p.Id)
            //   .HasName("PrimaryKey_ProfileId");

            //modelBuilder.Entity<Declaration>()
            //    .HasKey(p => p.Id)
            //.HasName("PrimaryKey_DeclarationId");

            // modelBuilder.Entity<Declaration>().HasOne(c => c.Profile);
            //modelBuilder.Entity<Declaration>().OwnsOne<IEnumerable<Chapter>>(c => c.Chapters);
            //modelBuilder.Entity<Question>().OwnsOne<IEnumerable<Answer>>(c => c.Answers);
            //modelBuilder.Entity<Question>().OwnsOne<Validation>(c=>c.Validation);
            //modelBuilder.Entity<Declaration>().OwnsOne<IEnumerable<Question>>(c => c.Questions);

            // modelBuilder.Entity<Profile>()
            //.HasMany(c => c.Declarations);

        }
    }

    /// <summary>
    /// Database Context factory class. This is used to create empty database context
    /// </summary>
    public class DesignTimeDbContextFactory : IDesignTimeDbContextFactory<DatabaseContext>
    {
        /// <summary>
        /// Function to create empty database context
        /// </summary>
        /// <param name="args"></param>
        /// <returns></returns>
        public DatabaseContext CreateDbContext(string[] args)
        {

            var builder = new DbContextOptionsBuilder<DatabaseContext>();

            // optionsBuilder.UseSqlite(string.Format("Filename={0}", _databasePath));

            //  var connectionString = @"C:\Users\g516675\Desktop\smartFlow1.db";

            // builder.UseSqlite(connectionString);

            return new DatabaseContext("");
        }
    }
}
