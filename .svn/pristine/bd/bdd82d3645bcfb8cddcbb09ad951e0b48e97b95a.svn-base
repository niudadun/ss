using SmartFlow.Shared.DataTemplates;
using SmartFlow.Shared.Models;
using SmartFlow.Shared.Respository.Interfaces;
using SmartFlow.Shared.Views;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;
using Xamarin.Forms;

namespace SmartFlow.Shared.ViewModels
{
    /// <summary>
    /// Class for handling Profile model and functions to handle database calls.
    /// </summary>
    public class ProfileViewModel : BaseViewModel
    {
        private static string TAG = "ProfileViewModel";
        private Profile _intialProfile = null;
        

        /// <summary>
        /// Current/Selected profile model
        /// </summary>
        public Profile CurrentProfile {

            get
            {
                if (_intialProfile == null)
                {
                    _intialProfile = ProfileTemplate.CreateProfile();
                }
                return _intialProfile;
            }
            set
            {

            }
        }

        /// <summary>
        /// Profile view model construction.
        /// </summary>
        /// <param name="navigate"></param>
        public ProfileViewModel()
        {
            // CurrentProfile = ProfileTemplate.CreateProfile();
        }

        /// <summary>
        /// Profile view model with ID
        /// </summary>
        /// <param name="navigate">navigation service</param>
        /// <param name="Id">selected profile id</param>
        public ProfileViewModel(int Id)
        {
            CurrentProfile = _intialProfile = _profilesRepository.GetProfileByIdAsync(Id).Result;
        }

        /// <summary>
        /// Load Answer from profile template.
        /// </summary>
        public void LoadAnswers()
        {
            var template = ProfileTemplate.CreateProfile();
            foreach (var ques in CurrentProfile.Chapters[0].Questions)
            {
                foreach (var question in template.Chapters[0].Questions)
                {
                    if (question.QuestionIdentifier == ques.QuestionIdentifier)
                    {
                        ques.Answers = question.Answers;
                    }
                }
            }
        }
        
        public async Task ExecuteAddCommand()
        {
            IsLoading = true;
            UpdateProfileName();
            ModifyAnswers();
            await _profilesRepository.AddProfileAsync(CurrentProfile);
            IsLoading = false;
        }
        
        public async Task ExecuteUpdateCommand()
        {
            IsLoading = true;
            UpdateProfileName();
            ModifyAnswers();
            await _profilesRepository.UpdateProfileAsync(CurrentProfile);
            IsLoading = false;
        }

        public async Task ExecuteDeleteCommand(object id)
        {
            IsLoading = true;
            await _profilesRepository.RemoveProfileAsync(Convert.ToInt32(id));
            IsLoading = false;
        }
        /// <summary>
        /// Update profile Name
        /// </summary>
        private void UpdateProfileName()
        {
            CurrentProfile.Chapters[0].Questions.ForEach(i =>
            {
                if (i.QuestionIdentifier == Enums.QuestionIdenfiers.FULLNAME)
                    CurrentProfile.Name = i.AnswerText;
            });
        }

        private void ModifyAnswers()
        {

            CurrentProfile.Chapters[0].Questions.ForEach(i =>
                        {
                            if (i.Type == QuestionType.DropDown && i.Answers.Any())
                            {
                                i.AnswerText = i.Answers[i.SelectedAnswerIndex].Text;
                                i.AnswerCode = i.Answers[i.SelectedAnswerIndex].Code;
                            }
                            i.Answers = null;
                        });

        }

        
    }
}
