using SmartFlow.Shared.Helpers.Interfaces;
using SmartFlow.Shared.Models;
using SmartFlow.Shared.Respository;
using SmartFlow.Shared.Respository.Interfaces;
using SmartFlow.Shared.ViewModels;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ImageCircle.Forms.Plugin.Abstractions;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using SmartFlow.Shared.Converters;
using SmartFlow.Shared.Helpers;

namespace SmartFlow.Shared.Views
{
    /// <summary>
    /// Profile List Page
    /// This page will display all the profiles from database in listview
    /// </summary>
	[XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class ProfilesList : ContentPage
    {
        private static string TAG = "ProfilesList";

        //  Navigation Page index : This will tell that on which page the number pad is at and based on that we calculate the views to be shown.
        int NumberPageIndex = 1;
        
        /// <summary>
        /// Boolean to check if we need to reload the profile list from database
        /// Since we are reloading the list in "OnAppearing", we should only reload when profile is updated/created/deleted.
        /// And hence this variable is marked as false, when any view is clicked and only made true back on the "Success" Screen
        /// </summary>
        public static bool IsUpdateProfileList = true;

        /// <summary>
        /// Profile View model for handling db profile list
        /// </summary>
        public BaseViewModel ViewModelNav;

        List<Profile> ProfileListData;
        Enums.EnumMaps Mode;

        /// <summary>
        /// Profile List Page constructor with Profile id and Mode
        /// </summary>
        public ProfilesList(InfoHolder infoHolder)
        {
            InitializeComponent();
            this.Padding = App.PagePadding;

            Mode = infoHolder.Mode;
            ProfileList.ItemSelected += OnSelection;

            //FooterViewId = new FooterView();
            FooterViewId.SetButtonHandling("").Clicked += OnCreateClicked;

            ViewModelNav = new BaseViewModel();
            BindingContext = ViewModelNav;

            IsUpdateProfileList = true;
        }

        /// <summary>
        /// Method to set the text/properties for the view layout
        /// </summary>
        void SetPageText()
        {
            if (Mode == Enums.EnumMaps.PROFILE_LIST)
            {
                InfoPageId.SetLabelInfo("ic_exclamation_blue", Helpers.L10n.GetMappedString(Enums.TextMapping.NO_PROFILES));
                if (ProfileListData.Count >= Utils.MAXIMUM_PROFILES_ALLOWED)
                {
                    FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_VIEW));
                }
                else
                {
                    FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_CREATE));
                }
            }
            else if (Mode == Enums.EnumMaps.CREATE_DECLARATION)
            {
                InfoPageId.SetLabelInfo("ic_exclamation_blue", Helpers.L10n.GetMappedString(Enums.TextMapping.NO_PROFILES_FOUND));
                FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_VIEW));

                // Change request 16 Jan 2018 : Need to remove "Add" profile option from create and manage declarations.
                // Not having any create profile for Create or Manage Declarations scenario
                //InfoPageId.SetLabelInfo("ic_exclamation_blue", Helpers.L10n.GetMappedString(Enums.TextMapping.NO_PROFILES));
                //if (ViewModelNav.Profiles.ToList().Count > 0)
                //{
                //    FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_VIEW));
                //}
                //else
                //{
                //    FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_CREATE));
                //}
            }
            else if (Mode == Enums.EnumMaps.MANAGE_DECLARATION)
            {
                InfoPageId.SetLabelInfo("ic_exclamation_blue", Helpers.L10n.GetMappedString(Enums.TextMapping.NO_PROFILES_FOUND));
                FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_VIEW));
            }
        }

        /// <summary>
        /// List selecting event. 
        /// When user selects any item from listview, this event is fired.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnSelection(object sender, SelectedItemChangedEventArgs e)
        {
            if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                return;
            var myList = (ListView)sender;
            if (e.SelectedItem == null)
            {
                return;
            }

            var profile = (Profile)e.SelectedItem;

            ProfilesList.IsUpdateProfileList = false;
            App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(profile.Id, Mode), false);
            myList.SelectedItem = null;
        }

        /// <summary>
        /// Click event on navigation bar
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnSelectionForNavBar(object sender, EventArgs e)
        {
            var btn = (Button)sender;
            int id = Int16.Parse(btn.Text);
            ProfilesList.IsUpdateProfileList = false;

            if (Device.RuntimePlatform == Device.iOS)
            {
                Device.BeginInvokeOnMainThread(async () =>
                {
                    if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                    {
                        await App.NavigationService.GoBack(false);
                    }
                    await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(ProfileListData[id - 1].Id, Mode), false);
                });
            }
            else
            {
                if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                {
                    App.NavigationService.GoBack(false);
                }
                App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(ProfileListData[id - 1].Id, Mode), false);
            }
        }
        /// <summary>
        /// Create new profile, which navigate to a profile creation page.
        /// When Create action button is clicked
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnCreateClicked(object sender, EventArgs e)
        {
            ProfilesList.IsUpdateProfileList = false;
            if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString())
                return;
            if (Mode == Enums.EnumMaps.MANAGE_DECLARATION)
            {
                if (ProfileListData != null && ProfileListData.Count > 0)
                {
                    int id = Int16.Parse("1");
                    if (Device.RuntimePlatform == Device.iOS)
                    {
                        Device.BeginInvokeOnMainThread(async () =>
                        {
                            if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                            {
                                await App.NavigationService.GoBack(false);
                            }
                            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(ProfileListData[id - 1].Id, Mode), false);
                        });
                    }
                    else
                    {
                        if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                        {
                            App.NavigationService.GoBack(false);
                        }
                        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(ProfileListData[id - 1].Id, Mode), false);
                    }
                }
            }
            else if (Mode == Enums.EnumMaps.CREATE_DECLARATION)
            {
                if (ProfileListData != null && ProfileListData.Count > 0)
                {
                    int id = Int16.Parse("1");
                    if (Device.RuntimePlatform == Device.iOS)
                    {
                        Device.BeginInvokeOnMainThread(async () =>
                        {
                            if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                            {
                                await App.NavigationService.GoBack(false);
                            }
                            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(ProfileListData[id - 1].Id, Mode), false);
                        });
                    }
                    else
                    {
                        if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                        {
                            App.NavigationService.GoBack(false);
                        }
                        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(ProfileListData[id - 1].Id, Mode), false);
                    }
                }
                // Change request 16 Jan 2018 : Need to remove "Add" profile option from create and manage declarations.
                // Not having any create profile for Create or Manage Declarations scenario
                //else
                //{
                //    if (Device.RuntimePlatform == Device.iOS)
                //    {
                //        Device.BeginInvokeOnMainThread(async () =>
                //        {
                //            if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString())
                //            {
                //                await App.NavigationService.GoBack(false);
                //            }
                //            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString(), new InfoHolder(-1, Enums.EnumMaps.CREATE_PROFILE), false);
                //        });
                //    }
                //    else
                //    {
                //        if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString())
                //        {
                //            App.NavigationService.GoBack(false);
                //        }
                //        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString(), new InfoHolder(-1, Enums.EnumMaps.CREATE_PROFILE), false);
                //    }
                //}
            }
            else
            {
                // If Profile list count has reached maximun number of allowed profiles, we should not be adding more profiles.
                // Hence change the button to "View" and functionality to view 1st available profile.
                if (ProfileListData.Count >= Utils.MAXIMUM_PROFILES_ALLOWED)
                {
                    int id = Int16.Parse("1");
                    if (Device.RuntimePlatform == Device.iOS)
                    {
                        Device.BeginInvokeOnMainThread(async () =>
                        {
                            if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                            {
                                await App.NavigationService.GoBack(false);
                            }
                            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(ProfileListData[id - 1].Id, Mode), false);
                        });
                    }
                    else
                    {
                        if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                        {
                            App.NavigationService.GoBack(false);
                        }
                        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(ProfileListData[id - 1].Id, Mode), false);
                    }
                }
                else
                {
                    if (Device.RuntimePlatform == Device.iOS)
                    {
                        Device.BeginInvokeOnMainThread(async () =>
                        {
                            if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString())
                            {
                                await App.NavigationService.GoBack(false);
                            }
                            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString(), new InfoHolder(-1, Enums.EnumMaps.CREATE_PROFILE), false);
                        });
                    }
                    else
                    {
                        if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString())
                        {
                            App.NavigationService.GoBack(false);
                        }
                        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString(), new InfoHolder(-1, Enums.EnumMaps.CREATE_PROFILE), false);
                    }
                }
            }
        }

        /// <summary>
        /// Application developers can override this method to provide behavior when the back button is pressed.
        /// </summary>
        /// <returns>
        /// To be added.
        /// </returns>
        /// <remarks>
        /// Handled default back navigation of android to Custom Navigation.
        /// </remarks>
        protected override bool OnBackButtonPressed()
        {
            App.NavigationService.GoBack(false);
            return true;
        }

        /// <summary>
        /// When user click back arrow on number pad
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NavBackPage(object sender, EventArgs e)
        {
            NumberPageIndex--;
            CreateNavBar();
        }

        /// <summary>
        /// When user clicks forward arrow on number pad.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void NavNextPage(object sender, EventArgs e)
        {
            NumberPageIndex++;
            CreateNavBar();
        }


        /// <summary>
        /// Create navigation number pad.
        /// This handles all the views across the pages and take into account the maximum number of profiles supported.
        /// </summary>
        public void CreateNavBar()
        {
            if (ProfileListData != null)
            {
                try
                {
                    // Reset the navigation bar to empty text and no delegation methods attached.
                    var profileList = ProfileListData.FindAll(i => i != null);

                    FooterViewId.CreateNavBar(false, 0,false, profileList.Count, NumberPageIndex, NavNextPage, NavBackPage, OnSelectionForNavBar, OnCreateClicked, Mode);
                }
                catch (Exception e)
                {
                    LogHandler.AddExceptionLog(TAG, "", e, true);
                }
            }
            else
            {
                FooterViewId.SetNavigationBarVisible(false);
            }
        }


        /// <summary>
        /// Load list view based on data from database.
        /// </summary>
        private async Task LoadListViewAsync()
        {
            if (IsUpdateProfileList)
            {
                InfoPageId.IsVisible = false;
                FooterViewId.IsVisible = false;

                ProfileListData = ViewModelNav.GetProfilesBasicInfo().Result;

                FooterViewId.IsVisible = true;
                SetPageText();
                //if no profile data in database, it will display "No profile" message.
                if (ProfileListData.Count == 0)
                {
                    InfoPageId.IsVisible = true;
                    ProfileList.IsVisible = false;
                    CreateNavBar();

                    // Change request 16 Jan 2018 : Need to remove "Add" profile option from create and manage declarations.
                    // Not having any create profile for Create or Manage Declarations scenario
                    if (Mode == Enums.EnumMaps.MANAGE_DECLARATION || Mode == Enums.EnumMaps.CREATE_DECLARATION)
                    {
                        FooterViewId.SetButtonVisible(false);
                    }
                    else
                    {
                        FooterViewId.SetButtonVisible(true);
                    }
                }
                //if there are profiles in database, it will display the profile list.
                else
                {
                    CreateNavBar();

                    ProfileList.IsVisible = true;
                    InfoPageId.IsVisible = false;
                    ProfileList.ItemTemplate = new DataTemplate(typeof(ProfileListItemView));
                    foreach (Profile pr in ProfileListData)
                    {
                        pr.Index = ProfileListData.IndexOf(pr) + 1;
                    }
                    ProfileList.ItemsSource = ProfileListData;
                    //MaincontentStack.Children[0] = ProfileList;

                }
            }
        }

        /// <summary>
        /// Overridden method called when page comes to foreground
        /// </summary>
        protected override void OnAppearing()
        {
            LoadListViewAsync();
        }
    }

}