using SmartFlow.Shared.Helpers.Interfaces;
using SmartFlow.Shared.Models;
using SmartFlow.Shared.Respository;
using SmartFlow.Shared.Respository.Interfaces;
using SmartFlow.Shared.ViewModels;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ImageCircle.Forms.Plugin.Abstractions;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using SmartFlow.Shared.Converters;
using SmartFlow.Shared.Helpers;

namespace SmartFlow.Shared.Views
{
    /// <summary>
    /// Profile Info View
    /// When user clicks on any profile item in profile page, this view is generated
    /// </summary>
	[XamlCompilation(XamlCompilationOptions.Compile)]
	public partial class ProfileInfoDialogPage : ContentPage
	{
        private static string TAG = "ProfileInfoDialogPage";
        private int profileIndex;
        int selectedId = -1;

        /// View model for selected profile
        public ProfileViewModel ViewModel;
        /// <summary>
        /// Profile list object 
        /// </summary>
        public List<Profile> Profiles;

        Enums.EnumMaps Mode;
        /// <summary>
        /// Profile Info page constructor.
        /// </summary>
        public ProfileInfoDialogPage()
        {
            InitializeComponent();
            this.Padding = App.PagePadding;

            FooterViewId.SetButtonHandling("").Clicked += OnViewClicked;
            SetPageText();
        }

        /// <summary>
        /// Profile Info page constructor with Profile id and State
        /// </summary>
        public ProfileInfoDialogPage(InfoHolder infoHolder)
        {
            InitializeComponent();
            this.Padding = App.PagePadding;

            Mode = infoHolder.getwhichMode();
            selectedId = infoHolder.getId();
            Profiles = infoHolder.GetProfileList();
            FooterViewId.SetButtonHandling("").Clicked += OnViewClicked;
            SetPageText();
        }

        /// <summary>
        /// Method to set the text for the view layout
        /// </summary>
        void SetPageText()
        {
            if (Mode == Enums.EnumMaps.PROFILE_LIST)
            {
                BtnGrid.IsVisible = true;
                BtnGridDivider.IsVisible = true;
                BtnGrid1.IsVisible = true;
                BtnGrid2.IsVisible = false;
                BtnUpdate.Text = Helpers.L10n.GetMappedString(Enums.TextMapping.UPDATE_TEXT);
                BtnDelete.Text = Helpers.L10n.GetMappedString(Enums.TextMapping.DELETE_TEXT);
                FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_VIEW));
            }
            else if (Mode == Enums.EnumMaps.MANAGE_DECLARATION)
            {
                BtnGridDivider.IsVisible = true;
                BtnGrid.IsVisible = false;
                BtnGrid1.IsVisible = false;
                BtnGrid2.IsVisible = false;
                BtnUpdate.Text = "";
                BtnDelete.Text = "";
                FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.EDIT_TEXT));

                InfoGridView.RowDefinitions[2].Height = 0;
            }
            else if (Mode == Enums.EnumMaps.CREATE_DECLARATION)
            {
                // Change request 16 Jan 2018 : Need to remove "Add" profile option from create and manage declarations.
                // Not having any create profile for Create or Manage Declarations scenario

                BtnGridDivider.IsVisible = true;
                BtnGrid.IsVisible = false;
                BtnGrid1.IsVisible = false;
                BtnGrid2.IsVisible = false;
                BtnUpdate.Text = "";
                BtnDelete.Text = "";

                FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_VIEW));
                InfoGridView.RowDefinitions[2].Height = 0;

                //BtnGrid.IsVisible = true;
                //BtnGridDivider.IsVisible = true;
                //BtnGrid1.IsVisible = false;
                //BtnGrid2.IsVisible = true;
                //FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_VIEW));
                //BtnAddPassenger.Text = Helpers.L10n.GetMappedString(Enums.TextMapping.ADD_PASSENGER);
            }
        }

        /// <summary>
        /// Method to fill information of the selected profile
        /// </summary>
        void updateData()
        {
            if (ViewModel.CurrentProfile != null)
            {
                if (ViewModel.CurrentProfile.Image != null)
                {
                    var stream = new MemoryStream(ViewModel.CurrentProfile.Image);
                    ProfileImage.Source = ImageSource.FromStream(() => stream);
                }
                else
                {
                    ProfileImage.Source = ImageSource.FromFile(Utils.DEFAULT_PROFILE_PIC);
                }
                ProfileName.Text = ViewModel.CurrentProfile.Name;
                ProfileId.Text = "Profile " + (profileIndex + 1).ToString();
            }
        }

        /// <summary>
        /// Update Profile Button Clicked 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnUpdateClicked(object sender, EventArgs e)
        {
            if (Mode == Enums.EnumMaps.MANAGE_DECLARATION)
            {
                if (Navigation.ModalStack.Count == 0 || Navigation.ModalStack.Last().GetType() != typeof(ManageDeclarationPage))
                {
                    if (Device.RuntimePlatform == Device.iOS)
                    {
                        Device.BeginInvokeOnMainThread(async () =>
                        {
                            await App.NavigationService.GoBack(false);
                            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ManageDeclarationPage.ToString(), new InfoHolder(selectedId, Enums.EnumMaps.MANAGE_DECLARATION), false);
                        });
                    }
                    else
                    {
                        App.NavigationService.GoBack(false);
                        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ManageDeclarationPage.ToString(), new InfoHolder(selectedId, Enums.EnumMaps.MANAGE_DECLARATION), false);
                    }
                }
            }
            else if (Mode == Enums.EnumMaps.PROFILE_LIST)
            {
                if (Navigation.ModalStack.Count == 0 || Navigation.ModalStack.Last().GetType() != typeof(ManageProfilePage))
                {
                    if (Device.RuntimePlatform == Device.iOS)
                    {
                        Device.BeginInvokeOnMainThread(async () =>
                        {
                            await App.NavigationService.GoBack(false);
                            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ManageProfilePage.ToString(), new InfoHolder(selectedId, Enums.EnumMaps.UPDATE_INFO_VIEW), false);
                        });
                    }
                    else
                    {
                        App.NavigationService.GoBack(false);
                        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ManageProfilePage.ToString(), new InfoHolder(selectedId, Enums.EnumMaps.UPDATE_INFO_VIEW), false);
                    }
                }
            }
        }

        /// <summary>
        /// Delete profile Button Clicked 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        async void BtnDeleteClicked(object sender, EventArgs e)
        {
            var answer = await DisplayAlert(Shared.Resources.AppResources.delete_profile, Shared.Resources.AppResources.profile_permanent_delete,
                Shared.Resources.AppResources.yes_text, Shared.Resources.AppResources.no_text);
            if (answer)
            {
                FooterViewId.IsVisible = false;
                InfoGridView.IsEnabled = false;
                await ViewModel.ExecuteDeleteCommand(selectedId);
                
                Device.BeginInvokeOnMainThread(async () =>
                {
                    await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.SuccessPage.ToString(), new InfoHolder(-1, Enums.EnumMaps.DELETE_INFO), false);
                    FooterViewId.IsVisible = true;
                    InfoGridView.IsEnabled = true;
                });
            }

        }

        /// <summary>
        /// View Profile button clicked
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnViewClicked(object sender, EventArgs e)
        {
            if (Mode == Enums.EnumMaps.PROFILE_LIST)
            {
                if (Navigation.ModalStack.Count == 0 || Navigation.ModalStack.Last().GetType() != typeof(ManageProfilePage))
                {
                    if (Device.RuntimePlatform == Device.iOS)
                    {
                        Device.BeginInvokeOnMainThread(async () =>
                        {
                            await App.NavigationService.GoBack(false);
                            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ManageProfilePage.ToString(), new InfoHolder(selectedId, Enums.EnumMaps.VIEW_INFO), false);
                        });
                    }
                    else
                    {
                        App.NavigationService.GoBack(false);
                        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ManageProfilePage.ToString(), new InfoHolder(selectedId, Enums.EnumMaps.VIEW_INFO), false);
                    }
                }
            }
            else if (Mode == Enums.EnumMaps.CREATE_DECLARATION)
            {
                if (Navigation.ModalStack.Count == 0 || Navigation.ModalStack.Last().GetType() != typeof(CreateDeclarationPage))
                {
                    if (Device.RuntimePlatform == Device.iOS)
                    {
                        Device.BeginInvokeOnMainThread(async () =>
                        {
                            await App.NavigationService.GoBack(false);
                            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.CreateDeclarationPage.ToString(), new InfoHolder(selectedId, Enums.EnumMaps.CREATE_DECLARATION_SELECTION_SCREEN), false);
                        });
                    }
                    else
                    {
                        App.NavigationService.GoBack(false);
                        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.CreateDeclarationPage.ToString(), new InfoHolder(selectedId, Enums.EnumMaps.CREATE_DECLARATION_SELECTION_SCREEN), false);
                    }
                }
            }
            else if (Mode == Enums.EnumMaps.MANAGE_DECLARATION)
            {
                if (Navigation.ModalStack.Count == 0 || Navigation.ModalStack.Last().GetType() != typeof(ManageDeclarationPage))
                {
                    if (Device.RuntimePlatform == Device.iOS)
                    {
                        Device.BeginInvokeOnMainThread(async () =>
                        {
                            await App.NavigationService.GoBack(false);
                            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ManageDeclarationPage.ToString(), new InfoHolder(selectedId, Enums.EnumMaps.MANAGE_DECLARATION), false);
                        });
                    }
                    else
                    {
                        App.NavigationService.GoBack(false);
                        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ManageDeclarationPage.ToString(), new InfoHolder(selectedId, Enums.EnumMaps.MANAGE_DECLARATION), false);
                    }
                }
            }

        }
        
        /// <summary>
        /// Method to get the profile data from the selected profile
        /// </summary>
        private void GetProfileData()
        {
            if (selectedId != -1)
            {              
                ViewModel = new ProfileViewModel(Navigation, selectedId);
                BindingContext = ViewModel;
                profileIndex = Profiles.IndexOf(ViewModel.CurrentProfile);
                updateData();

                //ViewModelNav.RefreshCommand.Execute(null);
                FooterViewId.SetNavigationBarVisible(true);
                if (profileIndex < 7)
                {                    
                    CreateNavBar();
                }
                else
                {                    
                    CreateSecondPageOfNavBar();
                }
            }            
        }

        /// <summary>
        /// Overridden method called when page comes to foreground
        /// </summary>
        protected override void OnAppearing()
        {
            GetProfileData();
        }


        private void NavBackPage(object sender, EventArgs e)
        {
            CreateNavBar();
        }

        private void NavNextPage(object sender, EventArgs e)
        {
            CreateSecondPageOfNavBar();
        }

        /// <summary>
        /// Create Second page of Navigation bar
        /// </summary>
        public void CreateSecondPageOfNavBar()
        {
            var profileList = Profiles;
            for (var k = 1; k <= 8; k++)
            {
                if (FooterViewId.Content.FindByName<Button>("Nav_" + k).Text == "+")
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + k).Clicked -= OnCreateClicked;
                }
                if (FooterViewId.Content.FindByName<Button>("Nav_" + k).Text == "<")
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + k).Clicked -= NavBackPage;
                }
                if (FooterViewId.Content.FindByName<Button>("Nav_" + k).Text == ">")
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + k).Clicked -= NavNextPage;
                }
                else
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + k).Clicked -= OnSelectionTest;
                }
                FooterViewId.Content.FindByName<Button>("Nav_" + k).Text = "";
                FooterViewId.Content.FindByName<Button>("Nav_" + k).IsVisible = false;
                FooterViewId.Content.FindByName<Button>("Nav_" + k).BackgroundColor = Color.Transparent;
                FooterViewId.Content.FindByName<Button>("Nav_" + k).TextColor = Color.Black;
            }

            if (profileIndex >= 7)
            {
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileIndex - 6)).BackgroundColor = Color.FromHex(Shared.Resources.AppResources.blue_color);
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileIndex - 6)).TextColor = Color.White;
            }

            if (profileList.Count < 12)
            {
                // Change request 16 Jan 2018 : Need to remove "Add" profile option from create and manage declarations.
                // Not having any create profile for Create or Manage Declarations scenario
                if (Mode == Enums.EnumMaps.MANAGE_DECLARATION || Mode == Enums.EnumMaps.CREATE_DECLARATION)
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).IsVisible = false;
                }
                else
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).IsVisible = true;
                }
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).Text = "+";
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).Clicked += OnCreateClicked;


                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 5)).IsVisible = true;
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 5)).Text = "<";
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 5)).Clicked += NavBackPage;

            }

            if (profileList.Count >= 12)
            {
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).IsVisible = true;
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).Text = "<";
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).Clicked += NavBackPage;

            }

            for (int i = 1; i <= profileList.Count - 7; i++)
            {
                FooterViewId.Content.FindByName<Button>("Nav_" + i).IsVisible = true;
                FooterViewId.Content.FindByName<Button>("Nav_" + i).Text = (i + 7).ToString();
                FooterViewId.Content.FindByName<Button>("Nav_" + i).Clicked += OnSelectionTest;

            }
        }

        /// <summary>
        /// Create First page of Navigation bar
        /// </summary>
        public void CreateNavBar()
        {
            var profileList = Profiles;
            for (var k = 1; k <= 8; k++)
            {
                if (FooterViewId.Content.FindByName<Button>("Nav_" + k).Text == "+")
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + k).Clicked -= OnCreateClicked;
                }
                if (FooterViewId.Content.FindByName<Button>("Nav_" + k).Text == "<")
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + k).Clicked -= NavBackPage;
                }
                if (FooterViewId.Content.FindByName<Button>("Nav_" + k).Text == ">")
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + k).Clicked -= NavNextPage;
                }
                else
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + k).Clicked -= OnSelectionTest;
                }
                FooterViewId.Content.FindByName<Button>("Nav_" + k).Text = "";
                FooterViewId.Content.FindByName<Button>("Nav_" + k).IsVisible = false;
                FooterViewId.Content.FindByName<Button>("Nav_" + k).BackgroundColor = Color.Transparent;
                FooterViewId.Content.FindByName<Button>("Nav_" + k).TextColor = Color.Black;
            }

            if (profileIndex < 7)
            {
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileIndex + 1)).BackgroundColor = Color.FromHex(Shared.Resources.AppResources.blue_color);
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileIndex + 1)).TextColor = Color.White;
            }

            if (profileList.Count < 8)
            {
                // Change request 16 Jan 2018 : Need to remove "Add" profile option from create and manage declarations.
                // Not having any create profile for Create or Manage Declarations scenario
                if (Mode == Enums.EnumMaps.MANAGE_DECLARATION || Mode == Enums.EnumMaps.CREATE_DECLARATION)
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count + 1)).IsVisible = false;
                }
                else
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count + 1)).IsVisible = true;
                }
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count + 1)).Text = "+";
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count + 1)).Clicked += OnCreateClicked;

                for (var j = 1; j <= profileList.Count; j++)
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + j).IsVisible = true;
                    FooterViewId.Content.FindByName<Button>("Nav_" + j).Text = j.ToString();
                    FooterViewId.Content.FindByName<Button>("Nav_" + j).Clicked += OnSelectionTest;
                }
            }
            // if (profileList.Count >= 8)
            else
            {
                FooterViewId.Content.FindByName<Button>("Nav_8").IsVisible = true;
                FooterViewId.Content.FindByName<Button>("Nav_8").Text = ">";
                FooterViewId.Content.FindByName<Button>("Nav_8").Clicked += NavNextPage;

                for (int i = 1; i < 8; i++)
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + i).IsVisible = true;
                    FooterViewId.Content.FindByName<Button>("Nav_" + i).Text = i.ToString();
                    FooterViewId.Content.FindByName<Button>("Nav_" + i).Clicked += OnSelectionTest;
                }
            }
        }

        private void OnSelectionTest(object sender, EventArgs e)
        {
            var btn = (Button)sender;
            int id = Int16.Parse(btn.Text);
            var modellist = Profiles;
            
            selectedId = modellist[id - 1].Id;
            GetProfileData();

            //if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
            //{
            //    App.NavigationService.GoBack(false);
            //}
            //App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(modellist[id - 1].Id, Enums.EnumMaps.UPDATE_INFO, modellist), false);


        }
        /// <summary>
        /// Create new profile, which navigate to a profile creation page.
        /// When Create action button is clicked
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnCreateClicked(object sender, EventArgs e)
        {
            if (Device.RuntimePlatform == Device.iOS)
            {
                Device.BeginInvokeOnMainThread(async () =>
                {
                    if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                    {
                        await App.NavigationService.GoBack(false);
                    }
                    await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString(), false);
                });
            }
            else
            {
                if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                {
                    App.NavigationService.GoBack(false);
                }
                App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString(), false);
            }
        }

        /// <summary>
        /// Add Passenger Button Clicked 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnAddPassengerClicked(object sender, EventArgs e)
        {
            OnCreateClicked(sender, e);
        }

        /// <summary>
        /// Application developers can override this method to provide behavior when the back button is pressed.
        /// </summary>
        /// <returns>
        /// To be added.
        /// </returns>
        /// <remarks>
        /// Handled default back navigation of android to Custom Navigation.
        /// </remarks>
        protected override bool OnBackButtonPressed()
        {
            App.NavigationService.GoBack(false);
            return true;
        }
    }
}