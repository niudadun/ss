using SmartFlow.Shared.Data;
using SmartFlow.Shared.Models;
using SmartFlow.Shared.Respository.Interfaces;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using SmartFlow.Shared.Models.Ede.Enums;
using SmartFlow.Shared.Helpers;

namespace SmartFlow.Shared.Respository
{
    /// <summary>
    /// Class to define all methods from Declaration Interface
    /// </summary>
    public class DeclarationsRepository : IDeclarationsRepository
    {
        private static string TAG = "DeclarationsRepository";

        private readonly DatabaseContext _databaseContext;

        public DeclarationsRepository(DatabaseContext dbContext)
        {
            _databaseContext = dbContext;
        }
        public async Task<bool> AddDeclarationAsync(Declaration declaration)
        {
            try
            {
                var tracking = await _databaseContext.Declarations.AddAsync(declaration);

                await _databaseContext.SaveChangesAsync();

                var isAdded = tracking.State == EntityState.Added;

                return isAdded;
            }
            catch (Exception e)
            {
                LogHandler.AddExceptionLog(TAG, "", e, true);
                return false;
            }
        }

        public async Task<Declaration> GetDeclarationByIdAsync(int id)
        {
            try
            {
                var declaration = await _databaseContext.Declarations
                                     .Include(i => i.Chapters)
                                     .ThenInclude(i => i.Questions)
                                     .ThenInclude(i => i.Answers)
                                     .Include(i => i.Chapters)
                                     .ThenInclude(i => i.Questions)
                                     .ThenInclude(i => i.Config)
                                     .SingleAsync(i => i.Id == id);

                return declaration;
            }
            catch (Exception e)
            {
                LogHandler.AddExceptionLog(TAG, "", e, true);
                return null;
            }
        }

        public async Task<IEnumerable<Declaration>> GetDeclarationsAsync()
        {
            try
            {
                var products = await _databaseContext.Declarations.ToListAsync();

                return products;
            }
            catch (Exception e)
            {
                LogHandler.AddExceptionLog(TAG, "", e, true);
                return null;
            }
        }

        public async Task<Declaration> GetDeclarationByTypeAsync(DeclarationType Type)
        {
            try
            {
                var declaration =  await _databaseContext.Declarations
                                        .Include(i => i.Profile)
                                        .ThenInclude(i=>i.Chapters)
                                        .ThenInclude(i => i.Questions)
                                        .ThenInclude(i => i.Config)
                                        .Include(i => i.Profile)
                                        .ThenInclude(i => i.Chapters)
                                        .ThenInclude(i => i.Questions)
                                        .ThenInclude(i => i.Answers)
                                        .Include(i => i.Chapters)
                                        .ThenInclude(i => i.Questions)
                                        .ThenInclude(i => i.Config)
                                        .Include(i => i.Chapters)
                                        .ThenInclude(i => i.Questions)
                                        .ThenInclude(i => i.Answers)
                                        .SingleAsync(i => i.DeclarationType == Type);

                return declaration;
            }
            catch (Exception e)
            {
                LogHandler.AddExceptionLog(TAG, "", e, true);
                return null;
            }
        }

        public async Task<IEnumerable<Declaration>> QueryDeclarationsAsync(Func<Declaration, bool> predicate)
        {
            try
            {
                var products = _databaseContext.Declarations.Where(predicate);

                return products.ToList();
            }
            catch (Exception e)
            {
                LogHandler.AddExceptionLog(TAG, "", e, true);
                return null;
            }
        }

        public async Task<bool> RemoveDeclarationAsync(int id)
        {
            try
            {
                var product = await _databaseContext.Declarations.FindAsync(id);

                var tracking = _databaseContext.Remove(product);

                await _databaseContext.SaveChangesAsync();

                var isDeleted = tracking.State == EntityState.Deleted;

                return isDeleted;
            }
            catch (Exception e)
            {
                LogHandler.AddExceptionLog(TAG, "", e, true);
                return false;
            }
        }

        public async Task<bool> UpdateDeclarationAsync(Declaration declaration)
        {
            try
            {
                var tracking = _databaseContext.Update(declaration);

                await _databaseContext.SaveChangesAsync();

                var isModified = tracking.State == EntityState.Modified;

                return isModified;
            }
            catch (Exception e)
            {
                LogHandler.AddExceptionLog(TAG, "", e, true);
                return false;
            }
        }
    }
}
