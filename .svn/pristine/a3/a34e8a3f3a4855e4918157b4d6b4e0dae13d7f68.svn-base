using SmartFlow.Shared.Helpers.Interfaces;
using SmartFlow.Shared.Models;
using SmartFlow.Shared.Respository;
using SmartFlow.Shared.Respository.Interfaces;
using SmartFlow.Shared.ViewModels;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ImageCircle.Forms.Plugin.Abstractions;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;
using SmartFlow.Shared.Converters;
using SmartFlow.Shared.Helpers;

namespace SmartFlow.Shared.Views
{
    /// <summary>
    /// Profile List Page
    /// This page will display all the profiles from database in listview
    /// </summary>
	[XamlCompilation(XamlCompilationOptions.Compile)]
	public partial class ProfilesList : ContentPage
	{
        private static string TAG = "ProfilesList";

        /// <summary>
        /// Profile View model for handling db profile list
        /// </summary>
        public BaseViewModel ViewModelNav;
        Enums.EnumMaps Mode;
        
        /// <summary>
        /// Profile List Page constructor with Profile id and Mode
        /// </summary>
        public ProfilesList(InfoHolder infoHolder)
        {
            InitializeComponent();
            this.Padding = App.PagePadding;

            Mode = infoHolder.GetMode();
            ProfileList.ItemSelected += OnSelection;
            FooterViewId.SetButtonHandling("").Clicked += OnCreateClicked;

            ViewModelNav = new BaseViewModel();
            BindingContext = ViewModelNav;
        }

        /// <summary>
        /// Method to set the text/properties for the view layout
        /// </summary>
        void SetPageText()
        {
            if (Mode == Enums.EnumMaps.PROFILE_LIST)
            {
                InfoPageId.SetLabelInfo("ic_exclamation_blue", Helpers.L10n.GetMappedString(Enums.TextMapping.NO_PROFILES));
                FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_CREATE));
            }
            else if (Mode == Enums.EnumMaps.CREATE_DECLARATION)
            {
                InfoPageId.SetLabelInfo("ic_exclamation_blue", Helpers.L10n.GetMappedString(Enums.TextMapping.NO_PROFILES_FOUND));
                FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_VIEW));

                // Change request 16 Jan 2018 : Need to remove "Add" profile option from create and manage declarations.
                // Not having any create profile for Create or Manage Declarations scenario
                //InfoPageId.SetLabelInfo("ic_exclamation_blue", Helpers.L10n.GetMappedString(Enums.TextMapping.NO_PROFILES));
                //if (ViewModelNav.Profiles.ToList().Count > 0)
                //{
                //    FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_VIEW));
                //}
                //else
                //{
                //    FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_CREATE));
                //}
            }
            else if (Mode == Enums.EnumMaps.MANAGE_DECLARATION)
            {
                InfoPageId.SetLabelInfo("ic_exclamation_blue", Helpers.L10n.GetMappedString(Enums.TextMapping.NO_PROFILES_FOUND));
                FooterViewId.SetButtonHandling(Helpers.L10n.GetMappedString(Enums.TextMapping.PROFILE_LIST_BTN_VIEW));
            }
        }

        /// <summary>
        /// List selecting event. 
        /// When user selects any item from listview, this event is fired.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnSelection(object sender, SelectedItemChangedEventArgs e)
        {
            if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                return;
            var myList = (ListView)sender;
            if (e.SelectedItem == null)
            {              
                return; 
            }
           
            var profile = (Profile)e.SelectedItem;
            App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(profile.Id,Mode, ViewModelNav.Profiles.ToList()), false);
            myList.SelectedItem = null;

        }

        /// <summary>
        /// Click event on navigation bar
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnSelectionForNavBar(object sender, EventArgs e)
        {
            var btn = (Button)sender;
            int id = Int16.Parse(btn.Text);
            var modellist = ViewModelNav.Profiles.ToList();
            if (Device.RuntimePlatform == Device.iOS)
            {
                Device.BeginInvokeOnMainThread(async () =>
                {
                    if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                    {
                        await App.NavigationService.GoBack(false);
                    }
                    await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(modellist[id - 1].Id, Mode, modellist), false);
                });
            }
            else
            {
                if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                {
                    App.NavigationService.GoBack(false);
                }
                App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(modellist[id - 1].Id, Mode, modellist), false);
            }


        }
        /// <summary>
        /// Create new profile, which navigate to a profile creation page.
        /// When Create action button is clicked
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnCreateClicked(object sender, EventArgs e)
        {
            if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString())
                return;
            if (Mode == Enums.EnumMaps.MANAGE_DECLARATION)
            {
                if (ViewModelNav.Profiles != null && ViewModelNav.Profiles.ToList().Count > 0)
                {
                    int id = Int16.Parse("1");
                    var modellist = ViewModelNav.Profiles.ToList();
                    if (Device.RuntimePlatform == Device.iOS)
                    {
                        Device.BeginInvokeOnMainThread(async () =>
                        {
                            if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                            {
                                await App.NavigationService.GoBack(false);
                            }
                            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(modellist[id - 1].Id, Mode, modellist), false);
                        });
                    }
                    else
                    {
                        if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                        {
                            App.NavigationService.GoBack(false);
                        }
                        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(modellist[id - 1].Id, Mode, modellist), false);
                    }
                }
            }
            else if (Mode == Enums.EnumMaps.CREATE_DECLARATION)
            {
                if (ViewModelNav.Profiles != null && ViewModelNav.Profiles.ToList().Count > 0)
                {
                    int id = Int16.Parse("1");
                    var modellist = ViewModelNav.Profiles.ToList();
                    if (Device.RuntimePlatform == Device.iOS)
                    {
                        Device.BeginInvokeOnMainThread(async () =>
                        {
                            if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                            {
                                await App.NavigationService.GoBack(false);
                            }
                            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(modellist[id - 1].Id, Mode, modellist), false);
                        });
                    }
                    else
                    {
                        if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString())
                        {
                            App.NavigationService.GoBack(false);
                        }
                        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileInfoDialogPage.ToString(), new InfoHolder(modellist[id - 1].Id, Mode, modellist), false);
                    }
                }
                // Change request 16 Jan 2018 : Need to remove "Add" profile option from create and manage declarations.
                // Not having any create profile for Create or Manage Declarations scenario
                //else
                //{
                //    if (Device.RuntimePlatform == Device.iOS)
                //    {
                //        Device.BeginInvokeOnMainThread(async () =>
                //        {
                //            if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString())
                //            {
                //                await App.NavigationService.GoBack(false);
                //            }
                //            await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString(), new InfoHolder(-1, Enums.EnumMaps.CREATE_PROFILE), false);
                //        });
                //    }
                //    else
                //    {
                //        if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString())
                //        {
                //            App.NavigationService.GoBack(false);
                //        }
                //        App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString(), new InfoHolder(-1, Enums.EnumMaps.CREATE_PROFILE), false);
                //    }
                //}
            }
            else
            {
                if (Device.RuntimePlatform == Device.iOS)
                {
                    Device.BeginInvokeOnMainThread(async () =>
                    {
                        if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString())
                        {
                           await App.NavigationService.GoBack(false);
                        }
                        await App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString(), new InfoHolder(-1, Enums.EnumMaps.CREATE_PROFILE), false);
                    });
                }
                else
                {
                    if (App.NavigationService.CurrentPageKey == Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString())
                    {
                        App.NavigationService.GoBack(false);
                    }
                    App.NavigationService.NavigateModalAsync(Enums.PageEnumsForNavigation.ProfileCreateOptionsPage.ToString(), new InfoHolder(-1, Enums.EnumMaps.CREATE_PROFILE), false);
                }
            }
        }

        /// <summary>
        /// Application developers can override this method to provide behavior when the back button is pressed.
        /// </summary>
        /// <returns>
        /// To be added.
        /// </returns>
        /// <remarks>
        /// Handled default back navigation of android to Custom Navigation.
        /// </remarks>
        protected override bool OnBackButtonPressed()
        {
            App.NavigationService.GoBack(false);
            return true;
        }

        private void NavBackPage(object sender, EventArgs e)
        {
            CreateNavBar();
        }

        private void NavNextPage(object sender, EventArgs e)
        {
            CreateSecondNavBar();
        }

        /// <summary>
        /// Create second page of navigation bar.
        /// </summary>
        public void CreateSecondNavBar()
        {
            var profileList = ViewModelNav.Profiles.ToList();
            ResetNavigationBar();

            if (profileList.Count < 12)
            {
                // Change request 16 Jan 2018 : Need to remove "Add" profile option from create and manage declarations.
                // Not having any create profile for Create or Manage Declarations scenario
                if (Mode == Enums.EnumMaps.MANAGE_DECLARATION || Mode == Enums.EnumMaps.CREATE_DECLARATION)
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).IsVisible = false;
                }
                else
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).IsVisible = true;
                }
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).Text = "+";
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).Clicked += OnCreateClicked;


                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 5)).IsVisible = true;
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 5)).Text = "<";
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 5)).Clicked += NavBackPage;

            }

            if (profileList.Count >= 12)
            {
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).IsVisible = true;
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).Text = "<";
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count - 6)).Clicked += NavBackPage;

            }

            for (int i = 1; i <= profileList.Count - 7; i++)
            {
                FooterViewId.Content.FindByName<Button>("Nav_" + i).IsVisible = true;
                FooterViewId.Content.FindByName<Button>("Nav_" + i).Text = (i + 7).ToString();
                FooterViewId.Content.FindByName<Button>("Nav_" + i).Clicked += OnSelectionForNavBar;

            }
        }

        /// <summary>
        /// Create first page of navigation bar.
        /// </summary>
        public void CreateNavBar()
        {
            var profileList = ViewModelNav.Profiles.ToList();
            ResetNavigationBar();
            if (profileList.Count < 8)
            {
                // Change request 16 Jan 2018 : Need to remove "Add" profile option from create and manage declarations.
                // Not having any create profile for Create or Manage Declarations scenario
                if (Mode == Enums.EnumMaps.MANAGE_DECLARATION || Mode == Enums.EnumMaps.CREATE_DECLARATION)
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count + 1)).IsVisible = false;
                }
                else
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count + 1)).IsVisible = true;
                }
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count + 1)).Text = "+";
                FooterViewId.Content.FindByName<Button>("Nav_" + (profileList.Count + 1)).Clicked += OnCreateClicked;

                for (var j = 1; j <= profileList.Count; j++)
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + j).IsVisible = true;
                    FooterViewId.Content.FindByName<Button>("Nav_" + j).Text = j.ToString();
                    FooterViewId.Content.FindByName<Button>("Nav_" + j).Clicked += OnSelectionForNavBar;
                }
            }
            else
            {
                FooterViewId.Content.FindByName<Button>("Nav_8").IsVisible = true;
                FooterViewId.Content.FindByName<Button>("Nav_8").Text = ">";
                FooterViewId.Content.FindByName<Button>("Nav_8").Clicked += NavNextPage;

                for (int i = 1; i < 8; i++)
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + i).IsVisible = true;
                    FooterViewId.Content.FindByName<Button>("Nav_" + i).Text = i.ToString();
                    FooterViewId.Content.FindByName<Button>("Nav_" + i).Clicked += OnSelectionForNavBar;
                }
            }
        }

        void ResetNavigationBar()
        {
            for (var k = 1; k <= 8; k++)
            {
                if (FooterViewId.Content.FindByName<Button>("Nav_" + k).Text == "+")
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + k).Clicked -= OnCreateClicked;
                }
                else if (FooterViewId.Content.FindByName<Button>("Nav_" + k).Text == "<")
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + k).Clicked -= NavBackPage;
                }
                else if (FooterViewId.Content.FindByName<Button>("Nav_" + k).Text == ">")
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + k).Clicked -= NavNextPage;
                }
                else
                {
                    FooterViewId.Content.FindByName<Button>("Nav_" + k).Clicked -= OnSelectionForNavBar;
                }
                FooterViewId.Content.FindByName<Button>("Nav_" + k).Text = "";
                FooterViewId.Content.FindByName<Button>("Nav_" + k).IsVisible = false;
                FooterViewId.Content.FindByName<Button>("Nav_" + k).BackgroundColor = Color.Transparent;
                FooterViewId.Content.FindByName<Button>("Nav_" + k).TextColor = Color.Black;
            }
        }


        /// <summary>
        /// Load list view based on data from database.
        /// </summary>
        private async Task LoadListViewAsync()
        {
            InfoPageId.IsVisible = false;
            FooterViewId.IsVisible = false;
            await ViewModelNav.ExecuteLoadItemsCommand();
            FooterViewId.IsVisible = true;
            SetPageText();
            //if no profile data in database, it will display "No profile" message.
            if (ViewModelNav.Profiles == null || ViewModelNav.Profiles.ToList().Count == 0)
            {
                InfoPageId.IsVisible = true;
                ProfileList.IsVisible = false;
                ResetNavigationBar();
                FooterViewId.SetNavigationBarVisible(false);

                // Change request 16 Jan 2018 : Need to remove "Add" profile option from create and manage declarations.
                // Not having any create profile for Create or Manage Declarations scenario
                if (Mode == Enums.EnumMaps.MANAGE_DECLARATION || Mode == Enums.EnumMaps.CREATE_DECLARATION)
                {
                    FooterViewId.SetButtonVisible(false);
                }
                else
                {
                    FooterViewId.SetButtonVisible(true);
                }
            }
            //if there are profiles in database, it will display the profile list.
            else
            {
                FooterViewId.SetNavigationBarVisible(true);
                CreateNavBar();

                ProfileList.IsVisible = true;
                InfoPageId.IsVisible = false;
                ProfileList.ItemTemplate = new DataTemplate(typeof(ProfileListItemView));
                var profileList = ViewModelNav.Profiles.ToList();
                foreach (Profile pr in ViewModelNav.Profiles)
                {
                    pr.Index = profileList.IndexOf(pr) + 1;
                }
                ProfileList.ItemsSource = ViewModelNav.Profiles;
                //MaincontentStack.Children[0] = ProfileList;

            }
           
        }

        /// <summary>
        /// Overridden method called when page comes to foreground
        /// </summary>
        protected override void OnAppearing()
        {
            LoadListViewAsync();
        }
    }
   
}